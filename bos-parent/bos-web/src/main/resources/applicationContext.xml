<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:soap="http://cxf.apache.org/bindings/soap"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://cxf.apache.org/bindings/soap 
						http://cxf.apache.org/schemas/configuration/soap.xsd
						http://cxf.apache.org/jaxws 
						http://cxf.apache.org/schemas/jaxws.xsd">
	<!-- 加载属性文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 另外，还可以配置其他的东西到这里，如连接池的大小，初始化的大小等 -->
		
	</bean>
	
	<!-- 配置LocalSessionFactoryBean，spring提供的 用于整合hibernate的工厂bean-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 注入hibernateProperties相关的属性配置 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.hbm2dll.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		<!-- 注入hibernate的映射文件 -->
		<property name="mappingLocations">
			<list>
				<value>classpath:com/itheima/bos/domain/*.xml</value>
			</list>
		</property>
	</bean>
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 事务注解方式 -->
	<tx:annotation-driven/>
	
	<!-- 支持spring注解 -->
	<context:annotation-config/>
	
	
	<!-- 注解扫描 -->
	<context:component-scan base-package="com.itheima.bos"></context:component-scan>
	
	<!-- 注册crm客户端代理对象 -->
	<jaxws:client id="crmClient"
		serviceClass="com.itheima.crm.ICustomerService"
		address="http://192.168.1.8:8080/crm_heima32_service/service/customer">
	</jaxws:client>
	
	<!-- 配置shiro框架的过滤器工厂对象 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 注入安全管理器对象 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 注入相关页面访问url -->
		<!-- 登陆页面 -->
		<property name="loginUrl" value="/login.jsp"></property>
		<!-- 登陆成功后，验证成功时跳转页面 -->
		<property name="successUrl" value="/index.jsp"></property>
		<!-- 权限不足时跳转页面 -->
		<property name="unauthorizedUrl" value="/unauthorized.jsp"></property>
		<!-- 
			注入URL拦截规则
				**代表子目录及子孙目录下的所有的资源匹配
				*表示通配符匹配
				authoc:检查用户是否已经登陆
				anon：不进行过滤
		 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- /css/**   /js/**  等表示css目录下以及子目录，子孙目录等等的所有资源都不进行校验过滤 -->
				/css/** = anon
				/js/** = anon
				/images/** = anon
				/validatecode.jsp* = anon
				/userAction_login = anon
				<!-- 进行权限验证，如果登陆的用户含有staff-list权限，那么就可以进行访问action，如果没有，那么跳转到/unauthorized.jsp页面 -->
				/page_base_staff.action = perms["staff-list"]
				/* = authc
			</value>
		</property>
	</bean>
	
	<!-- 注册安全管理器对象 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="bosRealm"></property>
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>
	<bean id="bosRealm" class="com.itheima.bos.realm.BOSRealm">
	</bean>
	
	<!-- 开启shiro的自动注解 -->
	<bean id="defaultAdvisorAutoProxyCreator" 
	    class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
	    <!-- 必须使用cglib方式为Action对象创建代理对象，true：cglib代理，false：jdk代理 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	
	<!-- 配置shiro框架提供的切面类，用于创建代理对象 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	</bean>
	
	<!-- 注入缓存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 注入ehcache的配置文件 -->
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"></property>
	</bean>
	
	<!-- 注册自定义作业类 -->
	<bean id="myJob" class="com.itheima.bos.jobs.MailJob">
		<!-- 注入用户名，密码，邮件服务器 -->
		<property name="username" value="qiankeqin@163.com"></property>
		<property name="password" value="xxxxxx"></property>
		<property name="smtpServer" value="smtp.163.com"></property>
	</bean>
	
	<!-- 配置JobDetail -->
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 注入目标对象 -->
		<property name="targetObject" ref="myJob"></property>
		<!-- 注入目标方法 -->
		<property name="targetMethod" value="execute"></property>
	</bean>
	
	<!-- 配置触发器 -->
	<bean id="myTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 注入任务详情对象 -->
		<property name="jobDetail" ref="jobDetail"></property>
		<!-- 注入cron表达式，荣国这个表达式指定触发的时间点 -->
		<property name="cronExpression">
			<!-- 每5秒执行一次 -->
			<value>0 0 23 1 * ?</value>
		</property>
	</bean>
	
	<!-- 配置调度工厂 -->
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 注入触发器 -->
		<property name="triggers">
			<list>
				<!-- 可以注入多个触发器 -->
				<ref bean="myTrigger"/>
			</list>
		</property>
	</bean>
</beans>					
						